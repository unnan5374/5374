

var remote = require("electron").remote;
var fs = require("fs");
var path = require("path");
var spawn = require('child_process').spawn;
var request = require('request');

const Dialog = remote.dialog;
const browserWindow = remote.BrowserWindow;
const ckan_url = "http://172.22.52.73";

// データセット作成
const package_create_api = ckan_url + "/api/3/action/package_create";

// データセットIDリスト status=deleteは表示しないためやめる
//const package_list_api = ckan_url + "/api/3/action/package_list";
// データセットＩＤ参照
const package_show_id_api = ckan_url + "/api/3/action/package_show?id=";

// パッケージIDを指定してパッケージの詳細とリソース名等取得 q?
//const package_search_api = ckan_url + "/api/3/action/package_search?q=";

// 部局リスト参照
const organization_list_api = ckan_url + "/api/3/action/organization_list";

// 部局のタイトル参照　id：部局リストのid
const organization_show_id_api = ckan_url + "/api/3/action/organization_show?id=";

// ライセンスリスト参照
const license_list_api = ckan_url + "/api/3/action/license_list";

// リソース作成
const resource_create_api = ckan_url + "/api/3/action/resource_create";

//http://172.22.52.73/api/3/action/package_list

const api_key = "48de6c8a-6eb4-42d8-b3a8-48eb36994d5a";
const POST_REQUEST = "POST";
const GET_REQUEST = "GET";

// フォルダ最大数
const FOLDERMAX = 6;


// カレントディレクトリ
const cpath = process.cwd();

// メタデータテーブル表示前のエラーメッセージ
var pr_errmsg;

// CKANの部局IDとタイトルのjsonデータ
var ogz_List = [];

// ライセンスのjsonデータ
var lcs_List = [];

// メタデータ
var meta_datArray;
var meta_result;

// メタデータファイルフルパス
var metaFp;
var metaFnm;

var headers = {};
headers["Authorization"] = api_key;

// 作成フォルダ
var make_folder = new Array();


//var csvfilepath = "";
var csvData = "";
var p = 0;
var hiduke = "";

// リソースファイルの日付までのフォルダパス
var fpath;

// 登録データ一覧に表示したデータとリソースチェック結果
// フォルダ名
var rgi_foldernm = [];
// ファイル名
var rgi_filenm = [];
// チェック結果
var rgi_chk = [];

// リソース登録ファイル データセットID_タイトル、データタイトル、ファイル名
var rscFpath = new Array();

var holder = document.getElementById('holder');

//プログレスバーの要素
var progressBar = document.getElementById("preg");

var rscF_len = 0;
var rscF_now = 0;

var license = ["クリエイティブ・コモンズ 表示","クリエイティブ・コモンズ 表示 継承","クリエイティブ・コモンズ 非商用"];

/**
	登録用ファイル内容表示
*/
var dispMtbl = async function (csvData) {
  return new Promise(async function (resolve, reject) {

	//メタデータテーブルクリア
	metatbl_reset();

	pr_errmsg = "";

	var idErrFlg;

	// 件数エラーチェック
	var meta_rowArray = csvData.split("\r\n");

	if (meta_rowArray.length > 1001) {

		pr_errmsg = metaFnm + "：" + meta_rowArray.length + "件 \n　一括登録は１０００件まで実行できます。\n １０００件以下のファイルを選択してください。";
		resolve(pr_errmsg);
	}

	// 部局取得
	ogz_List.length = 0;
	//ogz_List.push({value: "",text: ""});

  	var oglOpt = {
      url: organization_list_api
    };

	var rtOgL = await request_api(oglOpt);

	var rOgLjson = JSON.parse(rtOgL);

	if (rOgLjson.success) {

		var og_idlist = rOgLjson.result;

		for(var i = 0; i<og_idlist.length;i++){

			// 部局タイトル取得
		  	var ogtOpt = {
		      url: organization_show_id_api + og_idlist[i]
		    };

			var rtOgTitle = await request_api(ogtOpt);
			var rOgTjson = JSON.parse(rtOgTitle);

			if (rOgTjson.success) {
				var tt = rOgTjson.result.title;

				// 部局リスト追加
				var ogzIdT = {
		      		value: og_idlist[i],
		      		text: rOgTjson.result.title
		      	};

				ogz_List.push(ogzIdT);

			} else {


			}
		}
	} else {

		resolve(false);
	}

  	var lclOpt = {
      url: license_list_api
    };

	var rtLcL = await request_api(lclOpt);
	var rLcLjson = JSON.parse(rtLcL);

	var rList = rLcLjson.result;
	lcs_List.length = 0;


	if (rLcLjson.success) {

		for(var j = 0; j<rList.length;j++){

			if (license.indexOf(rList[j].title) > -1) {

				lcs_List.push([rList[j].id,rList[j].title]);
			}
		}
	}

	document.getElementById("holder").innerText = "　　" + metaFp;
	document.getElementById("holder").style.height = "50px";

	// メタデータ一覧 エリア表示
	document.getElementById("mlt_show").style.display ="block";

	// メタデータ変数クリア
	meta_datArray = new Array();
	meta_result = [];

	var obj_meta_tbl = document.getElementById("meta_tbl");

	// エラー一覧 thead追加
	var meta_thead = obj_meta_tbl.createTHead();
	// エラー一覧 tbody追加
	var meta_tbody = obj_meta_tbl.createTBody();

	// 登録データ一覧　行
	//var err_msg = [];
	var err_msg = new Array();

    var tagcnt = 0;

    var mferrmsg;

	var errFlg = true;

	// Arrayに格納
	for(var j = 0; j<meta_rowArray.length;j++){

		var cntmsg = "";

		if (meta_rowArray[j]) {

			// 結果の列を付加
			meta_datArray[j] = meta_rowArray[j].split(",");

			// 4-1 列数チェック
			if (meta_datArray[j].length != 21) {
				//return "列数エラー：" + meta_datArray[j].length;
				reject("列数エラー：" + meta_datArray[j].length);
			}
		}
	}



	//☆☆☆
	if (mferrmsg) {
		var megbox = document.getElementById("mferrmsg");

		megbox.innerText = "　　" + mferrmsg;
	}

	// 表に2次元配列の要素を格納
	for(var k = 0; k < meta_datArray.length; k++){

		//if( make_folder.length >= FOLDERMAX ) break;

		if (make_folder.length >= FOLDERMAX) {

			pr_errmsg = "追加リソースファイル用のデータは一度に" + (FOLDERMAX + 1) + "件以上登録できません。"
			break;
		}

		var errflg = true;
		var meta_Row;

		// 行の追加	
		if(k==0){
			// ヘッダー行
			meta_Row = meta_thead.insertRow(-1);

		} else {
			//　tbody行
			meta_Row = meta_tbody.insertRow(-1);
		}

		// １列目のセル 結果
		var result_Cell;

		// ２列目のセル 概況　メッセージ
		var message_Cell;

		for(var m = 0; m < meta_datArray[0].length; m++){

			var meta_Cell;
			var did_Cell;

			// セルのテキスト設定
			if(k==0){

				meta_Cell = document.createElement("th");

  				// ヘッダー固定列 左上セル
  				if (m == 0) {
  					// １列目に行番号を付加
					meta_Cell.className = "head_fst";
					meta_Cell.textContent = "行数";
					meta_Cell.style.width = "40px";
					meta_Row.appendChild(meta_Cell);

  					// １列目に結果列を付加する
  					meta_Cell = document.createElement("th");
					meta_Cell.className = "head_snd";
					meta_Cell.textContent = "　エラー　チェック";
					meta_Cell.style.width = "90px";
					meta_Cell.style.left = "44";
					meta_Row.appendChild(meta_Cell);

					// ２列目
					meta_Cell = document.createElement("th");
					meta_Cell.className = "head_trd";
					meta_Cell.textContent = "メッセージ";
					meta_Cell.style.width = "160px";
					meta_Cell.style.left = "138";
					meta_Row.appendChild(meta_Cell);

					// ４列目
					meta_Cell = document.createElement("th");
					meta_Cell.className = "head_did";
					meta_Cell.style.width = "130px";
					meta_Cell.style.left = "302";

					// bom削除 ヘッダー：データセットID
					var bom = new RegExp("\ufeff");			
					var dst = meta_datArray[0][m];

					meta_datArray[0][m] = dst.replace(bom, "");
					meta_Cell.textContent = meta_datArray[0][m];
	  				
	  			} else {
					meta_Cell.textContent = meta_datArray[0][m];
	  			}
			}else{

				if (m == 0) {

					// １列目に行番号を付加
  					meta_Cell = document.createElement("th");
					//meta_Cell.className = "body_fst";
					meta_Cell.style.position = "sticky";
					meta_Cell.style.left = "0";
					meta_Cell.style.width = "40px";
					meta_Cell.style.backgroundColor = "#ccccff";
					meta_Cell.textContent = k;

					meta_Row.appendChild(meta_Cell);

  					// ２列目に結果列を付加する
  					meta_Cell = document.createElement("th");
					//meta_Cell.className = "body_fst";
					meta_Cell.style.position = "sticky";
					meta_Cell.style.left = "44";
					meta_Cell.style.width = "90px";
					meta_Row.appendChild(meta_Cell);
					result_Cell = meta_Cell;

					// ３列目に概況列を付加する
  					meta_Cell = document.createElement("th");
					//meta_Cell.className = "body_fst";
					meta_Cell.style.position = "sticky";
					//meta_Cell.style.left = "136";
					meta_Cell.style.width = "160px";
					meta_Cell.style.left = "138";
					meta_Cell.textContent = " ";

					meta_Row.appendChild(meta_Cell);
					message_Cell = meta_Cell;

					// ４列目
					meta_Cell = document.createElement("td");
					//meta_Cell.className = "body_snd";
					meta_Cell.style.position = "sticky";
					//meta_Cell.style.position = "absolute";
					
					meta_Cell.style.left = "302";

	  			} else {
					meta_Cell = document.createElement("td");
	  			}

				meta_Cell.textContent = meta_datArray[k][m];

				// エラーチェック
				//　4-2 データセットID
				if (m == 0) {
					// 空文字
					if (meta_datArray[k][0]) {

						// 最大文字長チェック（18文字）
						if (meta_datArray[k][0].length > 18 ){
							err_msg[k] = new Array(0,"データセットIDエラー","18文字以下で入力してください。");
						}

						// 半角英数チェック
						//if(!meta_datArray[k][0].match(/^[\x20-\x7e]+$/)){
						if(!meta_datArray[k][0].match(/^[a-z0-9]+$/)){
							err_msg[k] = new Array(0,"データセットIDエラー","英小文字か数字の半角のみで入力してください。");
						}
					} else {
						err_msg[k] = new Array(0,"データセットIDエラー","データセットIDを入力してください。");
					}

					did_Cell = meta_Cell;
				}

				//　4-3 データセットタイトル
				if (m == 1 && !err_msg[k]) {

					// 空文字
					if (!meta_datArray[k][1]) {
						err_msg[k] = new Array(1,"データセットタイトルエラー","データセットタイトルを入力してください。");
					}

					// 最大文字長チェック（100文字）
					if (meta_datArray[k][1].length > 100 ){
						err_msg[k] = new Array(1,"データセットタイトルエラー","100文字以下で入力してください。");
					}
				}

				//　4-4 データセット説明
				if (m == 2 && !err_msg[k] ) {

					// 最大文字長チェック（500文字）
					if (meta_datArray[k][2].length > 500 ){

						err_msg[k] = new Array(2,"データセット説明","500文字以下で入力してください。");
					}
				}

				// 4-5 タグ
				if (m == 3 && !err_msg[k]) {

					// 最大文字長チェック（50文字）

					if (meta_datArray[k][3].length > 50 ){
						err_msg[k] = new Array(3,"タグエラー","50文字以下で入力してください。");
					}

					if (!meta_datArray[k][3]) {

						tagcnt = 0;
					} else {
						tagcnt = meta_datArray[k][3].split("|").length;
					}
				}

				// 4-6 タグ（読み）
				if (m == 4 && !err_msg[k]) {

					// 最大文字長チェック（50文字）複数タグがある場合は１つの文字数らしいけど未対応
					if (meta_datArray[k][4].length > 50 ) {

						err_msg[k] = new Array(4,"タグ（読み）エラー","50文字以下で入力してください。");
					}

					if (!meta_datArray[k][4]) {

						if (tagcnt != 0) {
						//	err_msg[k] = new Array(4,"タグ（読み）エラー","タグと読み数不一致です。");
						}
					} else {

						if (tagcnt != meta_datArray[k][4].split("|").length) {
						//	err_msg[k] = new Array(4,"タグ（読み）エラー","タグと読み数不一致です。");
						}
					}
				}

				// 4-7 ライセンス
				if (m == 5 ) {

					if (meta_datArray[k][5]) {

						if (license.indexOf(meta_datArray[k][5]) < 0) {
							err_msg[k] = new Array(5,"ライセンスエラー","ライセンスを正しく入力してください。");						
						}

					} else {
						err_msg[k] = new Array(5,"ライセンスエラー","ライセンスを入力してください。");
					}
				} 
				// 4-8 組織  チェックなし

				// 4-9 事業説明等のページ
				// 半角英数チェック && !err_msg[k]
				if (m == 7 && !err_msg[k] && (meta_datArray[k][7])) {

					if (!meta_datArray[k][7].match(/^[\x20-\x7e]*$/)){
						err_msg[k] = new Array(7,"事業説明等のページエラー","半角英数字で入力してください。");
					}

					if (meta_datArray[k][7].indexOf("http://", 0) < 0 && meta_datArray[k][7].indexOf("https://", 0) < 0) {
						err_msg[k] = new Array(7,"事業説明等のページエラー","URL形式での入力が誤っています。");					
					}
				}

				// 4-10 データ所管部署
				if (m == 8 && !err_msg[k] && (meta_datArray[k][8])) {

					// 最大文字長チェック（100文字）
					if (meta_datArray[k][8].length > 100 ) {

						err_msg[k] = new Array(8,"データ所管部署エラー","100文字以下で入力してください。");
					}
				}

				// 4-13 更新頻度
				if (m == 11 && !err_msg[k] && (meta_datArray[k][11])) {

					// 最大文字長チェック（100文字）
					if (meta_datArray[k][11].length > 100 ) {

						err_msg[k] = new Array(11,"更新頻度エラー","100文字以下で入力してください。");
					}
				}

				// 4-14 カテゴリ
				if (m == 12 && !err_msg[k] && (meta_datArray[k][12])) {
					// カテゴリ存在チェック データセットID みたいに存在チェックする？
				}

				// 4-15 データタイトル
				if (m == 13 && !err_msg[k] && (meta_datArray[k][13])) {

					// 最大文字長チェック（100文字）
					if (meta_datArray[k][13].length > 100 ) {

						err_msg[k] = new Array(13,"データタイトルエラー","100文字以下で入力してください。");
					}
				}

				// 4-16 データURL
				if (m == 14 && !err_msg[k] && (meta_datArray[k][14])) {

					if (!meta_datArray[k][14].match(/^[\x20-\x7e]*$/)){
						err_msg[k] = new Array(14,"データURL　エラー","半角英数字で入力してください。");
					}
				
					if (meta_datArray[k][14].indexOf("http://", 0) != 0 && meta_datArray[k][14].indexOf("https://", 0) != 0) {
						err_msg[k] = new Array(14,"データURL　エラー","URL形式での入力が誤っています。");					
					}

					// 最大文字長チェック（2083文字）
					if (meta_datArray[k][14].length > 2083 ) {

						err_msg[k] = new Array(14,"データURL　エラー","2083文字以下で入力してください。");
					}
				}

				// 4-18 形式
				if (m == 16 && !err_msg[k] && (meta_datArray[k][16])) {

					// 最大文字長チェック（10文字）
					if (meta_datArray[k][16].length > 10 ) {

						err_msg[k] = new Array(16,"形式エラー","10文字以下で入力してください。");
					}
				}
			}

			if (err_msg[k]) {
				if (err_msg[k][0] == m) {
					//err_Cell = meta_Cell;
					meta_Cell.style.backgroundColor = "#ff9999";
				}
			}

			meta_Row.appendChild(meta_Cell);

			// 最終列
			if (m == (meta_datArray[k].length -1)) {
				// 
				if(k > 0){
					if (!err_msg[k]) {

						alert("④");

						// メタデータ重複チェック
						for(var c = 1; c < k; c++){
							// データセットID,データセットタイトル,データタイトル,形式が同じの場合はエラーとする
							if (meta_datArray[c][0] == meta_datArray[k][0] && 
								meta_datArray[c][1] == meta_datArray[k][1] &&
								meta_datArray[c][13] == meta_datArray[k][13] &&
								meta_datArray[c][16] == meta_datArray[k][16] ) {

								err_msg[k] = new Array(0,"重複エラー",c + "行目のデータと重複しています。");

								result_Cell.textContent = err_msg[k][1];
								result_Cell.style.background = '#ff9999';

								//message_Cell.textContent = "データセット追加";
								message_Cell.textContent = err_msg[k][2];
								message_Cell.style.backgroundColor = "#ff9999";

							}
						}

						alert("⑤");

						if (!err_msg[k]) {

							// フォルダ作成フラグ
							var isMfld;

							var url = package_show_id_api + meta_datArray[k][0];

							// データセットIDの存在チェック headers付加で削除済みも取得
						  	var requestOptions = {
						      url: url,
						   //   method: "GET",
						      headers: headers
						    };

							// 存在チェック API
							var rtapi = await request_api(requestOptions);
							var rjson = JSON.parse(rtapi);
							var sc = rjson.success;

							if (!sc) {
								result_Cell.textContent = "ﾃﾞｰﾀｾｯﾄ新規";
								result_Cell.style.background = '#ffe8d1';
								meta_result[k] = 1;

								message_Cell.textContent = "追加";
								message_Cell.textContent = "　　リソース追加：　　" + meta_datArray[k][13];
								message_Cell.style.background = '#d1ffa3';

							} else {
								//　データセット有
								// 削除済みパッケージid残存
								if (rjson.result.state != "active") {
									result_Cell.textContent = "データセットIDエラー";
									message_Cell.textContent = "このデータセットIDは登録できません。";

									result_Cell.style.background = '#ff9999';
									message_Cell.style.background = '#ff9999';
									did_Cell.style.backgroundColor = "#ff9999";

								} else {

									alert("⑥" + rjson);

									var ret = rjson.result;

									alert("⑥☆" + ret);

									//　修正かテーブルと比較する
									//ちがうものがあれば　meta_result[k] = 2;　メタデータはなにもしなければmeta_result[k] = 0;								
									var upFlg;

									// ライセンスID
									var licenseID; 
									for(var l = 0; l < lcs_List.length; l++){

										if (!licenseID) {
											if (lcs_List[l][1] == meta_datArray[k][5]) {
												licenseID = lcs_List[l][0];
											}											
										}
									}

									alert(ret.license_id  + "⑨" + licenseID);
					
									if (meta_datArray[k][1] == ret.title && 
										meta_datArray[k][2] == ret.notes &&
										licenseID == ret.license_id &&
										meta_datArray[k][8] == ret.maintainer &&
										meta_datArray[k][7] == ret.url &&
										meta_datArray[k][2] == ret.notes) {
										upFlg = true;

									} else {
										upFlg = false;
									}
												
									if (upFlg) {
										// メタデータ変更なし
										result_Cell.textContent = "データセット登録済";
										//　黄
										result_Cell.style.background = '#ffffd1';

									} else {

										result_Cell.textContent = "データセット修正";
										//　赤
										result_Cell.style.background = '#ffdbff';								
									}

									// リソース情報 取得
									var resources = rjson.result.resources;
									var rname = [];

									for(var r = 0; r<resources.length;r++){
										if (resources[r].state == "active") {
											rname.push(resources[r].name);
										}
									}

									// データタイトルが既存のパッケージID内のリソース名に存在した場合はリソース追加させない
									if (rname.indexOf(meta_datArray[k][13],0) < 0) {
										message_Cell.textContent = "　　リソース追加：　　" + meta_datArray[k][13];
										message_Cell.style.background = '#d1ffa3';

									} else {
										message_Cell.textContent = "　　リソース登録済：　" + meta_datArray[k][13];
										// グレー
										message_Cell.style.background = '#c0c0c0';
										// フォルダ作成させないときだけfalse
										isMfld = false;
									}
								}
							}

							if (isMfld) {
								// 作成用フォルダ名追加
								// ①データセットとタイトルのフォルダ名
								var ds_idT = meta_datArray[k][0] + "_" + meta_datArray[k][1];

								// ①内のフォルダ名（データタイトル）
								var ds_DTitle = meta_datArray[k][13];

								make_folder.push([ds_idT,ds_DTitle]);
							}

						}

					} else {
						result_Cell.textContent = err_msg[k][1];
						result_Cell.style.background = '#ff9999';

						//message_Cell.textContent = "データセット追加";
						message_Cell.textContent = err_msg[k][2];
						//message_Cell.style.backgroundColor = "#ffd1ff";
						message_Cell.style.backgroundColor = "#ff9999";

					}
				}
			}
	  	}
	}

	//initPage();

	if (err_msg.length == 0) {
    	// エラーなし
    	//isMErr(true);
    	//return true;
		resolve(true);
    } else {
    	// エラーあり
		resolve(false);
    }

    

  });
}


/**
  チェック実行ボタンクリック
*/
//document.querySelector("#fileSelect").addEventListener('click', () => {

/** hoverエリアにドラッグされた場合 */
holder.ondragover = function () {
  return false;
}

/** hoverエリアから外れた or ドラッグが終了した */
holder.ondragleave = holder.ondragend = function () {
  return false;
}

/** hoverエリアにドロップされた */
holder.ondrop = function (e) {
	e.preventDefault(); // イベントの伝搬を止めて、アプリケーションのHTMLとファイルが差し替わらないようにする

	var file = e.dataTransfer.files[0];
	metaFp = file.path;
	metaFnm = file.name;

	getMetaFile(file,true);
}


/**
	メタファイル取得、表示する
*/
async function getMetaFile(file,kubun){

	document.getElementById("datefolder_name").textContent = "";
	document.getElementById("reg_show").style.display ="none";

	document.getElementById("rsc_show").style.display ="none";
	document.getElementById("reg_show").style.display ="none";

	pr_errmsg = "";

	// 1_1 ファイル拡張子チェック
	if (chk_Kakutyosi(metaFnm)) {

		// 1_2 ファイルサイズチェック
		if (chk_filesize(file,kubun)) {

			// ファイル読込
		    var mdata = await readFile(metaFp);

		    // 空行削除
		    var csvdat = mdata.toString().replace("\r\n\r\n", "");

			// テーブル再表示
			var rtDispMtbl = await dispMtbl(csvdat);

		    //　メタデータ一覧表示
		    //if (isDispMtbl) {
		    if (rtDispMtbl) {
				resizeTo(1400,800);
				if (!pr_errmsg) {
					document.getElementById("rsc_show").style.display ="block";

				} else {
					Dialog.showErrorBox("メタデータCSVファイルエラー",pr_errmsg);
					pr_errmsg = null;
				}
			} else {

		    }
		}
	}

	//
	if (pr_errmsg) {
		mlt_show_reset();
		Dialog.showErrorBox("メタデータCSVファイルエラー",pr_errmsg);
	}
}


/**
	入力ファイルチェックのチェック実行ボタンクリック
*/
function mfile_select(){

	// ファイル選択
    openFileDlog();

}

/**
	メタデータファイル選択ダイアログをひらく
*/
function openFileDlog() {
    const win = browserWindow.getFocusedWindow();
    var filenm = "";
    Dialog.showOpenDialog(
        win,
        {
            properties: ['openFile'],
            title: 'メタデータファイル選択',
            defaultPath: '.',
            filters: [
                {
                    name: 'csvファイル', extensions: ['csv']
                }
            ]
        },
        (fileNames) => {
            if (fileNames) {

                filenm = fileNames[0]; //複数選択の可能性もあるので配列となる。

				metaFp = fileNames[0];

				var fpArray = metaFp.split("\\");
				metaFnm = fpArray[fpArray.length - 1];

				getMetaFile(metaFp,false);
            }
        }
    )
}

/**
	csvファイル取得
*/
function readFile(filenm) {
	return new Promise(function (resolve, reject) {

	fs.readFile(filenm, function (error, data) {
	    if (error != null) {
	        Dialog.showErrorBox("一括登録エラー：" + error ,"一括登録ファイルの読み込みに失敗しました。");
	        //return ;
	    }
	    resolve(data);
    });
  });

}

/**
	リセットボタンクリック
*/
function file_reset(e){

	mlt_show_reset();

}

/**
	メタデータ一覧以下リセット
*/
function mlt_show_reset(){
	// Windowサイズ変更 ※ならない？
    resizeTo(1000,800);
	moveBy(300, 0);

	// テーブルリセット
	metatbl_reset();

	var holder = document.getElementById("holder");

	holder.style.height = "130px";
	holder.innerText = "\n\n  登録ファイルをドラッグ&ドロップしてください。";
	document.getElementById("mlt_show").style.display ="none";



	// ☆☆☆ ↓帰ってくるまで待ちたい
	//initPage();
}


/**
	メタデータ一覧テーブルリセット
*/
function metatbl_reset(){

	var obj_meta_tbl = document.getElementById("meta_tbl");
	//×var obj_rgi_table = document.getElementById("meta_rgi_table");

	// テーブルクリア  エラー一覧
	if (obj_meta_tbl.rows.length > 0) {
		while( obj_meta_tbl.rows[0]) obj_meta_tbl.deleteRow(0);

		obj_meta_tbl.getElementsByTagName("thead")[0].remove();
		obj_meta_tbl.getElementsByTagName("tbody")[0].remove();
	}

	make_folder = new Array();
}

/**
	一括登録エリアリセット
*/
var regftbl_reset = function (flg){

	var obj_regf_tbl = document.getElementById("regfile_tbl");

	// テーブルクリア  エラー一覧
	if (obj_regf_tbl.rows.length > 0) {
		while( obj_regf_tbl.rows[0]) obj_regf_tbl.deleteRow(0);

		obj_regf_tbl.getElementsByTagName("tbody")[0].remove();
	}

	document.getElementById("rrt_area").textContent = "";
	document.getElementById("rrt_area").style.display ="none";
	document.getElementById("regfile_box").style.height = "0";

	// プログレスバー非表示
	document.getElementById("prg_area").style.display ="none";

	flg(true);
}


/**
	APIリクエスト　　戻り値を取得するまで待機する
*/
function request_api(options) {
  return new Promise(function (resolve, reject) {
    request(options, function (error, res, body) {
      //if (!error && res.statusCode == 200) {
		if (error) {
			alert("エラー：" + error);
			reject(error);
		} else {

        	resolve(body);
		}
    });
  });
}


/**
	再読み込みボタンクリック
*/
function meta_read(){

	// ファイル読込
	getMetaFile(metaFp,false);

}


/**
	リソース格納用フォルダ作成ボタンクリック
*/
function folder_make(e){

	// セーブ&表示&フォルダ作成
	make_rscFolder();
}


/**
	リソースエリアクリア
*/
function clr_rscArea(flg){

	var obj_regf_tbl = document.getElementById("regfile_tbl");

	// テーブルクリア  リソース一覧
	if (obj_regf_tbl.rows.length > 0) {
		while( obj_regf_tbl.rows[0]) obj_regf_tbl.deleteRow(0);

		obj_regf_tbl.getElementsByTagName("tbody")[0].remove();
	}
	document.getElementById("regfile_box").style.height = "0";

	document.getElementById("rrt_area").textContent = "";
	document.getElementById("rrt_area").style.display ="none";

	// プログレスバー非表示
	document.getElementById("prg_area").style.display ="none";
	document.getElementById("rsc_show").style.display ="block";
	flg(true);
}

/**
	リソース格納用フォルダ作成
*/
function make_rscFolder(){

  clr_rscArea(function(flg) {

	var today = new Date();
	hiduke = today.getFullYear() + ("00" + (today.getMonth() + 1)).slice(-2) +
	 ("00" + today.getDate()).slice(-2) + "_" + ("00" + today.getHours()).slice(-2) + 
	 ("00" + today.getMinutes()).slice(-2) + ("00" + today.getSeconds()).slice(-2);

	// 日時フォルダ重複チェック
	if (!fs.existsSync(hiduke)) {
		// 日時フォルダを作成 
		fs.mkdirSync(hiduke, (err, folder) => {
		if (err) throw err;
		 // console.log(folder);
		   alert("既にフォルダが存在します。");
		   return;
		});
	}

	var cc = 0;
	var ee = 0;
	var nn = 0;

	for(var q = 0; q < make_folder.length; q++){

		var rfld;

		for(var i = 0; i < 2; i++){

			if (i == 0) {
				rfld = hiduke + "/" + make_folder[q][0];

			} else {
				rfld = hiduke + "/" + make_folder[q][0] + "/" + make_folder[q][1];
			}

			// データセットID_タイトルのフォルダ
			// 存在するかチェック
			if (!fs.existsSync(rfld)) {

				// ①データセットID_タイトルのフォルダ作成
				fs.mkdirSync(rfld, (err, folder) => {

					if (err) {
						ee ++;
						alert("フォルダ作成エラー：" + err);
						//throw err;
					} else {
						cc ++;
					}
				});
			} else {
				nn ++;
			}
		}
	}

	document.getElementById("datefolder_name").textContent = "フォルダ：" + cpath + "\\" + hiduke;

    // エクスプローラをひらく
    spawn("cmd", ["/C","start " + cpath + "\\" + hiduke]);

    document.getElementById("reg_show").style.display ="block";
	document.getElementById("prg_area").style.display ="none";

  });
}

/**
	一括登録実行ボタンクリック
*/
function exec_reg(e){
	// 表示&フォルダ作成
	meta_resInsert();

}


/**
	一括登録するリソースファイルの日付フォルダ内のフォルダとファイル名取得
	regfile_tbl表示
*/

var meta_resInsert = async function () {
  return new Promise(async function (resolve, reject) {
	
	rscF_now = 0;

	var obj_rgf_tbl = document.getElementById("regfile_tbl");

	// エラー一覧 tbody追加
	var rsc_tbody = obj_rgf_tbl.createTBody();

	// リソースファイルのパスとファイル名取得
	fpath = cpath + "\\" + hiduke;
	//var folders = fs.readdirSync(fpath);
	// 日付フォルダ内のデータセットＩＤ_データセットタイトルフォルダ
	var IdTfolders = fs.readdirSync(fpath);

	rscFpath.length = 0;

	var stat_Cell = [];
	var rscRCnt = 0;

	// メタデータ登録
	for(var j = 0; j<meta_datArray.length;j++){

		// 新規か修正か判断してから追加なり修正なりしたい
		if (j > 0) {
			if (!meta_result[j]) {
				var dsurl;
				var formDataPrm;
				// タグ
				var tags = meta_datArray[j][3].split("|");

				// グループ（カテゴリ）
				var groups = meta_datArray[j][12].split("|");

				// 組織
				var organization = meta_datArray[j][6].split("|");

				// ☆☆更新頻度登録先不明
				// ライセンスID
				var licenseID; 
				for(var l = 0; l < lcs_List.length; l++){

					if (lcs_List[l][1] == meta_datArray[j][5]) {
						licenseID = lcs_List[l][0];
						break;
					}
				}


				dsurl  = package_create_api;

				var formDataPrm = {name: meta_datArray[j][0],
								private: 0,
								type: "dataset",
							//	tags : tags,
							//	groups : groups,
							//	organization : organization,
								license_id:licenseID,
								maintainer:meta_datArray[j][8],
								url:meta_datArray[j][7],
								title:meta_datArray[j][1],
								notes:meta_datArray[j][2]};
								
				var abb = formDataPrm.tags;

				var requestOptions = {
					url: package_create_api,
					method: "POST",
					headers: headers,
					formData: formDataPrm
				};

			    var pcapi = await request_api(requestOptions);

			    var pcjson = JSON.parse(pcapi);				
				var pcsc = pcjson.success;
				
				if (!pcsc) {
					var pc_err = pcjson.error.name;
					alert("エラー：" + pc_err);
					
					alert("ＥＪ：" + pcapi);
				}
				
			}
		}
	}






	for(var i = 0; i < IdTfolders.length; i++) {

		// データセットＩＤ_データセットタイトルフォルダ内のデータタイトルフォルダ
		var DTitlefolders = fs.readdirSync(fpath + "\\" + IdTfolders[i]);

		for(var j = 0; j < DTitlefolders.length; j++) {

			// データタイトルフォルダ内のファイル
			var dFiles = fs.readdirSync(fpath + "\\" + IdTfolders[i] + "\\" + DTitlefolders[j]);

			// データセットタイトルフォルダ内ファイルループ
			for(var k = 0; k < dFiles.length; k++) {

				// データファイルパス
				//var dfPath = [fpath + "\\" + IdTfolders[i] + "\\" + DTitlefolders[j],dFiles[k]];
				var dfPath = [IdTfolders[i] ,DTitlefolders[j],dFiles[k]];

				rscFpath.push(dfPath);

				// リソーステーブル 行追加
				var rsc_Row = rsc_tbody.insertRow(-1);
				stat_Cell[rscRCnt] = document.createElement("td");
				stat_Cell[rscRCnt].textContent = "　　処理待ち";
				stat_Cell[rscRCnt].className = "regfile_state";

				rsc_Row.appendChild(stat_Cell[rscRCnt]);

				var path_Cell = document.createElement("td");
				path_Cell.textContent = fpath + "\\" + IdTfolders[i] + "\\" + DTitlefolders[j] + "\\" + dFiles[k];
				rsc_Row.appendChild(path_Cell);
				rscRCnt ++;
			}
		}
	}







	//regfile_box 表示
	var obj_regfile_box = document.getElementById("regfile_box");

	if (rscRCnt == 0) {
		document.getElementById("rrt_area").style.display ="block";
		obj_regfile_box.style.height = "0";
		document.getElementById("rrt_area").textContent = "　　リソースファイルを " + fpath + " 内のフォルダに格納してください。";

		//resolve(false);
		//return;
	} else {

		if (rscRCnt < 5) {

			obj_regfile_box.style.height = rscRCnt * 50 + "px";
		} else {
			obj_regfile_box.style.height = "200px";
		}
		
		obj_regfile_box.style.border = "1px solid #000";
	}


		// プログレスバー表示
	document.getElementById("prg_area").style.display ="block";

	rscF_len = rscFpath.length;

	var sccCnt = 0;
	var errCnt = 0;

	//一括登録 メタデータ
	for(var i = 0; i < rscFpath.length; i++) {
		
		// フォルダ名よりデータセットID取得
		var indexID = rscFpath[i][0].indexOf("_",0);
		var dsetID = rscFpath[i][0].substr(0,indexID);
		var rscDTitle = rscFpath[i][1];
		
		// リソースファイル取得
		var data = fs.readFileSync(fpath + "\\" + rscFpath[i][0] + "\\" +rscFpath[i][1] + "\\" + rscFpath[i][2]);

		// ファイル名と拡張子分解
		var finmex = rscFpath[i][2].split(".");
		
		// 大文字拡張子 ★
		var extension = finmex[(finmex.length -1)].toUpperCase();

		var formDataPrm = {"package_id": dsetID, "name": rscDTitle, "format":extension}
		formDataPrm["upload"] = data;

		var requestOptions = {
						url: resource_create_api,
						method: "POST",
						headers: headers,
						formData: formDataPrm
		};

		// 
	    var rtapi = await request_api(requestOptions);
	    //var rtapi = "await request_api(requestOptions)";
		var rjson = JSON.parse(rtapi);				
	    var sc = rjson.success;

		if (sc) {

			sccCnt ++;
			stat_Cell[i].textContent = "　　登録完了";
		} else {
			errCnt ++;
			alert("エラー：" + rjson.error.name);
			stat_Cell[i].textContent = "登録失敗しました";
		}

		rscF_now ++;

		var vper = (rscF_now / rscF_len ) * 100;
		progressBar.value = vper;
	}

	// リソース登録結果コメントエリア表示
	document.getElementById("rrt_area").style.display ="block";
	document.getElementById("rrt_area").textContent = "　　リソースファイル登録完了しました。　成功：" + sccCnt  + "件　失敗：" + errCnt + "件";

	// プログレスバー非表示
	document.getElementById("prg_area").style.display ="none";

  });	
}


/*
	チェック
*/

/* 1_1 ファイル拡張子チェック */
function chk_Kakutyosi(file_name) {

	if (!file_name) {
		pr_errmsg = "ファイルを選択してください。";
		return false;
	}

	var fileTypes = file_name.split(".");
	var len = fileTypes.length;

	if (len === 0) {
		pr_errmsg = "選択したファイルがCSVファイルではありません。CSVファイルを選択してください。";
		return false;
	}

	if (fileTypes[len - 1] != "CSV" && fileTypes[len - 1] != "csv") {
		pr_errmsg = "選択したファイルがCSVファイルではありません。CSVファイルを選択してください。";
		return false;
	}

	return true;
}



/* 1_2 ファイルサイズチェック */
function chk_filesize(file,kubun) {

	if (kubun) {
		if (file.size == 0) {
			pr_errmsg = "空のファイルが選択されています。再度ファイルを選択してください。";
			return false;
		}
	} else {

		var stats = fs.statSync(file);
		if (stats.size == 0) {
			pr_errmsg = "空のファイルが選択されています。再度ファイルを選択してください。";
			return false;
		}
	}
	return true;
}


/**
	入力ファイルチェックのチェック実行ボタンクリック
*/
function win_close(){

  var window = remote.getCurrentWindow();
  window.close();

}

function sleep(msec) {
   return new Promise(function(resolve) {
 
      setTimeout(function() {resolve()}, msec);
 
   })
}




